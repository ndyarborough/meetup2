import * as WebBrowser from 'expo-web-browser';
import * as Google from 'expo-auth-session/providers/google';

WebBrowser.maybeCompleteAuthSession();

async function handleSignInWithGoogle() {
    const user = await AsyncStorage.getItem('@user');
    let formattedUser = {};
    if (!user) {
      // If no user exists in storage
      if (response?.type === 'success') {
        await getUserInfo(response.authentication.accessToken)
        // console.log(userInfo.email)
        // Add user to our db
        console.log(response)
        // fetch(`http://localhost:3000/users/register/${userInfo.email}/${userInfo.name}`, {
        //   method: 'POST',
        // })
        //   .then((response) => {
        //     if (response.status == 400) {
        //       // TODO: add validation for this
        //       // setDbErrors({general: 'Username or email already in use'})
        //       console.log('Username or email already in use')
        //       let unformattedUser = userInfo;
        //       formattedUser.email = unformattedUser.email;
        //       formattedUser.fullName = unformattedUser.name;
        //       console.log(formattedUser)
        //       setUserInfo(formattedUser)
        //       navigation.navigate('ViewProfile', { user: JSON.stringify(formattedUser) })
        //     }
        //     if (response.ok) {
        //       console.log('User added');
        //       console.log(response)
        //       let unformattedUser = userInfo;
        //       formattedUser.email = unformattedUser.email;
        //       formattedUser.fullName = unformattedUser.name;
        //       console.log(formattedUser)
        //       setUserInfo(formattedUser)
        //       navigation.navigate('ViewProfile', { user: JSON.stringify(formattedUser) })
        //     }
        //   })
        //   .catch((error) => {
        //     console.log('Network Error:', error);
        //   });
      }
    } else {
      // If there is already a user in storage
      
      

      let unformattedUser = JSON.parse(user)
      console.log(unformattedUser)
      let formattedUser = {};
      formattedUser.fullName = unformattedUser.name;
      console.log(formattedUser)
      setUserInfo(formattedUser)
      navigation.navigate('ViewProfile', { user: JSON.stringify(formattedUser) })
    }
  };

    // Set State info for Google Sign-in
    const [userInfo, setUserInfo] = React.useState(null);
    const [request, response, promptAsync] = Google.useAuthRequest({
  
      // All these keys are generated by Google Cloud, our project is called Meetup
      androidClientId: '638759062654-hiicpb6bj2ddoqltl26hegfrjsuikhpu.apps.googleusercontent.com',
      iosClientId: '638759062654-pci3qltdfo8ghdhhrnrsumr64vgdm5l5.apps.googleusercontent.com',
      webClientId: '638759062654-c18ec9vjivq8uf9goju8m7ndca7ehte4.apps.googleusercontent.com'
    });
  
    // Any time response is triggered, run handleSignInWithGoogle
    React.useEffect(() => {
      handleSignInWithGoogle();
    }, [response]);
  
    // Calls to Google api and sets session info based on user-chosen profile automatically
    const getUserInfo = async (token) => {
      let formattedUser = {};
      if (!token) return;
      try {
        const response = await fetch(
          "https://www.googleapis.com/userinfo/v2/me",
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        const user = await response.json();
        let unformattedUser = user;
        formattedUser.email = unformattedUser.email;
        formattedUser.fullName = unformattedUser.name;
        console.log(formattedUser)
  
        await AsyncStorage.setItem('@user', JSON.stringify(formattedUser));
  
        fetch(`http://localhost:3000/users/register/${user.email}/${user.name}`, {
          method: 'POST',
        })
          .then((response) => {
            if (response.status == 400) {
              // TODO: add validation for this
              // setDbErrors({general: 'Username or email already in use'})
              console.log('Username or email already in use')
              AsyncStorage.getItem('@user')
                .then((result) => {
                  console.log(typeof result)
                  navigation.navigate('ViewProfile', { user: result})
                })
            }
            if (response.ok) {
              console.log('User added');
              console.log(response)
              let unformattedUser = userInfo;
              formattedUser.email = unformattedUser.email;
              formattedUser.fullName = unformattedUser.name;
              console.log(formattedUser)
              setUserInfo(formattedUser)
              navigation.navigate('ViewProfile', { user: JSON.stringify(formattedUser) })
            }
          })
          .catch((error) => {
            console.log('Network Error:', error);
          });
      } catch (error) {
        // Add your own error handler here
        console.log(error)
      }
    }

    <Pressable style={{ margin: 40 }} onPress={() => signInController()}>
    {({ pressed }) => (
      <View
        style={{
          backgroundColor: pressed ? 'lightgray' : '#002C1D',
          padding: 10,
          borderRadius: 5,
        }}
      >
        <div style={styles.google}>Sign in with Google</div>
      </View>
    )}
  </Pressable>

const signInController = async () => { // Triggers when "Sign In with Google" is pressed

    // Wait to see if there is a session value in storage already
    if (await AsyncStorage.getItem('@user')) {

      // If session value already exists, go to view profile screen and pass user info
      navigation.navigate('ViewProfile', { user: JSON.stringify(userInfo) })

    } else promptAsync(); // Else run google sign in process
  }